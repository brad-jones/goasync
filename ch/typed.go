// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package ch

// MakeBool takes the given value and returns a channel with the value
// already sent to it, ready to be read.
func MakeBool(v bool) <-chan bool {
	channel := make(chan bool, 1)
	channel <- v
	return channel
}

// MakeBoolSlice takes the given value and returns a channel with the
// value already sent to it, ready to be read.
func MakeBoolSlice(v []bool) <-chan []bool {
	channel := make(chan []bool, 1)
	channel <- v
	return channel
}

// MakeByte takes the given value and returns a channel with the value
// already sent to it, ready to be read.
func MakeByte(v byte) <-chan byte {
	channel := make(chan byte, 1)
	channel <- v
	return channel
}

// MakeByteSlice takes the given value and returns a channel with the
// value already sent to it, ready to be read.
func MakeByteSlice(v []byte) <-chan []byte {
	channel := make(chan []byte, 1)
	channel <- v
	return channel
}

// MakeComplex128 takes the given value and returns a channel with the value
// already sent to it, ready to be read.
func MakeComplex128(v complex128) <-chan complex128 {
	channel := make(chan complex128, 1)
	channel <- v
	return channel
}

// MakeComplex128Slice takes the given value and returns a channel with the
// value already sent to it, ready to be read.
func MakeComplex128Slice(v []complex128) <-chan []complex128 {
	channel := make(chan []complex128, 1)
	channel <- v
	return channel
}

// MakeComplex64 takes the given value and returns a channel with the value
// already sent to it, ready to be read.
func MakeComplex64(v complex64) <-chan complex64 {
	channel := make(chan complex64, 1)
	channel <- v
	return channel
}

// MakeComplex64Slice takes the given value and returns a channel with the
// value already sent to it, ready to be read.
func MakeComplex64Slice(v []complex64) <-chan []complex64 {
	channel := make(chan []complex64, 1)
	channel <- v
	return channel
}

// MakeError takes the given value and returns a channel with the value
// already sent to it, ready to be read.
func MakeError(v error) <-chan error {
	channel := make(chan error, 1)
	channel <- v
	return channel
}

// MakeErrorSlice takes the given value and returns a channel with the
// value already sent to it, ready to be read.
func MakeErrorSlice(v []error) <-chan []error {
	channel := make(chan []error, 1)
	channel <- v
	return channel
}

// MakeFloat32 takes the given value and returns a channel with the value
// already sent to it, ready to be read.
func MakeFloat32(v float32) <-chan float32 {
	channel := make(chan float32, 1)
	channel <- v
	return channel
}

// MakeFloat32Slice takes the given value and returns a channel with the
// value already sent to it, ready to be read.
func MakeFloat32Slice(v []float32) <-chan []float32 {
	channel := make(chan []float32, 1)
	channel <- v
	return channel
}

// MakeFloat64 takes the given value and returns a channel with the value
// already sent to it, ready to be read.
func MakeFloat64(v float64) <-chan float64 {
	channel := make(chan float64, 1)
	channel <- v
	return channel
}

// MakeFloat64Slice takes the given value and returns a channel with the
// value already sent to it, ready to be read.
func MakeFloat64Slice(v []float64) <-chan []float64 {
	channel := make(chan []float64, 1)
	channel <- v
	return channel
}

// MakeInt takes the given value and returns a channel with the value
// already sent to it, ready to be read.
func MakeInt(v int) <-chan int {
	channel := make(chan int, 1)
	channel <- v
	return channel
}

// MakeIntSlice takes the given value and returns a channel with the
// value already sent to it, ready to be read.
func MakeIntSlice(v []int) <-chan []int {
	channel := make(chan []int, 1)
	channel <- v
	return channel
}

// MakeInt16 takes the given value and returns a channel with the value
// already sent to it, ready to be read.
func MakeInt16(v int16) <-chan int16 {
	channel := make(chan int16, 1)
	channel <- v
	return channel
}

// MakeInt16Slice takes the given value and returns a channel with the
// value already sent to it, ready to be read.
func MakeInt16Slice(v []int16) <-chan []int16 {
	channel := make(chan []int16, 1)
	channel <- v
	return channel
}

// MakeInt32 takes the given value and returns a channel with the value
// already sent to it, ready to be read.
func MakeInt32(v int32) <-chan int32 {
	channel := make(chan int32, 1)
	channel <- v
	return channel
}

// MakeInt32Slice takes the given value and returns a channel with the
// value already sent to it, ready to be read.
func MakeInt32Slice(v []int32) <-chan []int32 {
	channel := make(chan []int32, 1)
	channel <- v
	return channel
}

// MakeInt64 takes the given value and returns a channel with the value
// already sent to it, ready to be read.
func MakeInt64(v int64) <-chan int64 {
	channel := make(chan int64, 1)
	channel <- v
	return channel
}

// MakeInt64Slice takes the given value and returns a channel with the
// value already sent to it, ready to be read.
func MakeInt64Slice(v []int64) <-chan []int64 {
	channel := make(chan []int64, 1)
	channel <- v
	return channel
}

// MakeInt8 takes the given value and returns a channel with the value
// already sent to it, ready to be read.
func MakeInt8(v int8) <-chan int8 {
	channel := make(chan int8, 1)
	channel <- v
	return channel
}

// MakeInt8Slice takes the given value and returns a channel with the
// value already sent to it, ready to be read.
func MakeInt8Slice(v []int8) <-chan []int8 {
	channel := make(chan []int8, 1)
	channel <- v
	return channel
}

// MakeRune takes the given value and returns a channel with the value
// already sent to it, ready to be read.
func MakeRune(v rune) <-chan rune {
	channel := make(chan rune, 1)
	channel <- v
	return channel
}

// MakeRuneSlice takes the given value and returns a channel with the
// value already sent to it, ready to be read.
func MakeRuneSlice(v []rune) <-chan []rune {
	channel := make(chan []rune, 1)
	channel <- v
	return channel
}

// MakeString takes the given value and returns a channel with the value
// already sent to it, ready to be read.
func MakeString(v string) <-chan string {
	channel := make(chan string, 1)
	channel <- v
	return channel
}

// MakeStringSlice takes the given value and returns a channel with the
// value already sent to it, ready to be read.
func MakeStringSlice(v []string) <-chan []string {
	channel := make(chan []string, 1)
	channel <- v
	return channel
}

// MakeUint takes the given value and returns a channel with the value
// already sent to it, ready to be read.
func MakeUint(v uint) <-chan uint {
	channel := make(chan uint, 1)
	channel <- v
	return channel
}

// MakeUintSlice takes the given value and returns a channel with the
// value already sent to it, ready to be read.
func MakeUintSlice(v []uint) <-chan []uint {
	channel := make(chan []uint, 1)
	channel <- v
	return channel
}

// MakeUint16 takes the given value and returns a channel with the value
// already sent to it, ready to be read.
func MakeUint16(v uint16) <-chan uint16 {
	channel := make(chan uint16, 1)
	channel <- v
	return channel
}

// MakeUint16Slice takes the given value and returns a channel with the
// value already sent to it, ready to be read.
func MakeUint16Slice(v []uint16) <-chan []uint16 {
	channel := make(chan []uint16, 1)
	channel <- v
	return channel
}

// MakeUint32 takes the given value and returns a channel with the value
// already sent to it, ready to be read.
func MakeUint32(v uint32) <-chan uint32 {
	channel := make(chan uint32, 1)
	channel <- v
	return channel
}

// MakeUint32Slice takes the given value and returns a channel with the
// value already sent to it, ready to be read.
func MakeUint32Slice(v []uint32) <-chan []uint32 {
	channel := make(chan []uint32, 1)
	channel <- v
	return channel
}

// MakeUint64 takes the given value and returns a channel with the value
// already sent to it, ready to be read.
func MakeUint64(v uint64) <-chan uint64 {
	channel := make(chan uint64, 1)
	channel <- v
	return channel
}

// MakeUint64Slice takes the given value and returns a channel with the
// value already sent to it, ready to be read.
func MakeUint64Slice(v []uint64) <-chan []uint64 {
	channel := make(chan []uint64, 1)
	channel <- v
	return channel
}

// MakeUint8 takes the given value and returns a channel with the value
// already sent to it, ready to be read.
func MakeUint8(v uint8) <-chan uint8 {
	channel := make(chan uint8, 1)
	channel <- v
	return channel
}

// MakeUint8Slice takes the given value and returns a channel with the
// value already sent to it, ready to be read.
func MakeUint8Slice(v []uint8) <-chan []uint8 {
	channel := make(chan []uint8, 1)
	channel <- v
	return channel
}

// MakeUintptr takes the given value and returns a channel with the value
// already sent to it, ready to be read.
func MakeUintptr(v uintptr) <-chan uintptr {
	channel := make(chan uintptr, 1)
	channel <- v
	return channel
}

// MakeUintptrSlice takes the given value and returns a channel with the
// value already sent to it, ready to be read.
func MakeUintptrSlice(v []uintptr) <-chan []uintptr {
	channel := make(chan []uintptr, 1)
	channel <- v
	return channel
}
